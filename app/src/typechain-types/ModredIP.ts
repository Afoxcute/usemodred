/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ModredIPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISPUTE_TIMEOUT"
      | "MINIMUM_LICENSE_DURATION"
      | "ROYALTY_DECIMALS"
      | "accountImplementation"
      | "approve"
      | "balanceOf"
      | "chainId"
      | "claimRoyalties"
      | "disputes"
      | "getApproved"
      | "getIPAccount"
      | "getIPAsset"
      | "getLicense"
      | "getRoyaltyInfo"
      | "ipAssets"
      | "isApprovedForAll"
      | "licenses"
      | "mintLicense"
      | "name"
      | "nextDisputeId"
      | "nextLicenseId"
      | "nextTokenId"
      | "owner"
      | "ownerOf"
      | "payRevenue"
      | "platformFeeCollector"
      | "platformFeePercentage"
      | "raiseDispute"
      | "registerIP"
      | "registry"
      | "renounceOwnership"
      | "resolveDispute"
      | "royaltyVaults"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setPlatformFeeCollector"
      | "setPlatformFeePercentage"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferIP"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "DisputeRaised"
      | "DisputeResolved"
      | "IPRegistered"
      | "IPTransferred"
      | "LicenseMinted"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "RevenuePaid"
      | "RoyaltyClaimed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LICENSE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROYALTY_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRoyalties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIPAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIPAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLicense",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ipAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "licenses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLicense",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextDisputeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextLicenseId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payRevenue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIP",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferIP",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LICENSE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROYALTY_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIPAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIPAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLicense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "licenses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintLicense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextDisputeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextLicenseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRevenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registerIP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferIP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    tokenId: BigNumberish,
    disputer: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    disputeId: bigint,
    tokenId: bigint,
    disputer: string,
    reason: string
  ];
  export interface OutputObject {
    disputeId: bigint;
    tokenId: bigint;
    disputer: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [disputeId: BigNumberish, resolution: string];
  export type OutputTuple = [disputeId: bigint, resolution: string];
  export interface OutputObject {
    disputeId: bigint;
    resolution: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPRegisteredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    ipHash: string,
    metadata: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    ipHash: string,
    metadata: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    ipHash: string;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IPTransferredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, from: string, to: string];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LicenseMintedEvent {
  export type InputTuple = [
    licenseId: BigNumberish,
    tokenId: BigNumberish,
    licensee: AddressLike,
    royaltyPercentage: BigNumberish
  ];
  export type OutputTuple = [
    licenseId: bigint,
    tokenId: bigint,
    licensee: string,
    royaltyPercentage: bigint
  ];
  export interface OutputObject {
    licenseId: bigint;
    tokenId: bigint;
    licensee: string;
    royaltyPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevenuePaidEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    payer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, payer: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    payer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyClaimedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    claimant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, claimant: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    claimant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ModredIP extends BaseContract {
  connect(runner?: ContractRunner | null): ModredIP;
  waitForDeployment(): Promise<this>;

  interface: ModredIPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISPUTE_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_LICENSE_DURATION: TypedContractMethod<[], [bigint], "view">;

  ROYALTY_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  accountImplementation: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  chainId: TypedContractMethod<[], [bigint], "view">;

  claimRoyalties: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, boolean, string, string] & {
        disputeId: bigint;
        tokenId: bigint;
        disputer: string;
        reason: string;
        timestamp: bigint;
        isResolved: boolean;
        arbitrator: string;
        resolution: string;
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getIPAccount: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getIPAsset: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, string, string, boolean, boolean, bigint, bigint, bigint] & {
        owner: string;
        ipHash: string;
        metadata: string;
        isEncrypted: boolean;
        isDisputed: boolean;
        registrationDate: bigint;
        totalRevenue: bigint;
        royaltyTokens: bigint;
      }
    ],
    "view"
  >;

  getLicense: TypedContractMethod<
    [licenseId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        licensee: string;
        tokenId: bigint;
        royaltyPercentage: bigint;
        duration: bigint;
        startDate: bigint;
        isActive: boolean;
        commercialUse: boolean;
        terms: string;
      }
    ],
    "view"
  >;

  getRoyaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalRevenue: bigint;
        royaltyShare: bigint;
        claimedAmount: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;

  ipAssets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        tokenId: bigint;
        owner: string;
        ipHash: string;
        metadata: string;
        isEncrypted: boolean;
        isDisputed: boolean;
        registrationDate: bigint;
        totalRevenue: bigint;
        royaltyTokens: bigint;
      }
    ],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  licenses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        licenseId: bigint;
        licensee: string;
        tokenId: bigint;
        royaltyPercentage: bigint;
        duration: bigint;
        startDate: bigint;
        isActive: boolean;
        commercialUse: boolean;
        terms: string;
      }
    ],
    "view"
  >;

  mintLicense: TypedContractMethod<
    [
      tokenId: BigNumberish,
      royaltyPercentage: BigNumberish,
      duration: BigNumberish,
      commercialUse: boolean,
      terms: string
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextDisputeId: TypedContractMethod<[], [bigint], "view">;

  nextLicenseId: TypedContractMethod<[], [bigint], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  payRevenue: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  platformFeeCollector: TypedContractMethod<[], [string], "view">;

  platformFeePercentage: TypedContractMethod<[], [bigint], "view">;

  raiseDispute: TypedContractMethod<
    [tokenId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  registerIP: TypedContractMethod<
    [ipHash: string, metadata: string, isEncrypted: boolean],
    [bigint],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [disputeId: BigNumberish, resolution: string],
    [void],
    "nonpayable"
  >;

  royaltyVaults: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { tokenId: bigint; totalRevenue: bigint }],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setPlatformFeeCollector: TypedContractMethod<
    [_collector: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFeePercentage: TypedContractMethod<
    [_percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferIP: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISPUTE_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_LICENSE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROYALTY_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRoyalties"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint, boolean, string, string] & {
        disputeId: bigint;
        tokenId: bigint;
        disputer: string;
        reason: string;
        timestamp: bigint;
        isResolved: boolean;
        arbitrator: string;
        resolution: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getIPAccount"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getIPAsset"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, string, string, boolean, boolean, bigint, bigint, bigint] & {
        owner: string;
        ipHash: string;
        metadata: string;
        isEncrypted: boolean;
        isDisputed: boolean;
        registrationDate: bigint;
        totalRevenue: bigint;
        royaltyTokens: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLicense"
  ): TypedContractMethod<
    [licenseId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        licensee: string;
        tokenId: bigint;
        royaltyPercentage: bigint;
        duration: bigint;
        startDate: bigint;
        isActive: boolean;
        commercialUse: boolean;
        terms: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoyaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalRevenue: bigint;
        royaltyShare: bigint;
        claimedAmount: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ipAssets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        tokenId: bigint;
        owner: string;
        ipHash: string;
        metadata: string;
        isEncrypted: boolean;
        isDisputed: boolean;
        registrationDate: bigint;
        totalRevenue: bigint;
        royaltyTokens: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "licenses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        licenseId: bigint;
        licensee: string;
        tokenId: bigint;
        royaltyPercentage: bigint;
        duration: bigint;
        startDate: bigint;
        isActive: boolean;
        commercialUse: boolean;
        terms: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintLicense"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      royaltyPercentage: BigNumberish,
      duration: BigNumberish,
      commercialUse: boolean,
      terms: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextDisputeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextLicenseId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "payRevenue"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "platformFeeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<
    [tokenId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerIP"
  ): TypedContractMethod<
    [ipHash: string, metadata: string, isEncrypted: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [disputeId: BigNumberish, resolution: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyVaults"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { tokenId: bigint; totalRevenue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPlatformFeeCollector"
  ): TypedContractMethod<[_collector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFeePercentage"
  ): TypedContractMethod<[_percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferIP"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "IPRegistered"
  ): TypedContractEvent<
    IPRegisteredEvent.InputTuple,
    IPRegisteredEvent.OutputTuple,
    IPRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IPTransferred"
  ): TypedContractEvent<
    IPTransferredEvent.InputTuple,
    IPTransferredEvent.OutputTuple,
    IPTransferredEvent.OutputObject
  >;
  getEvent(
    key: "LicenseMinted"
  ): TypedContractEvent<
    LicenseMintedEvent.InputTuple,
    LicenseMintedEvent.OutputTuple,
    LicenseMintedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevenuePaid"
  ): TypedContractEvent<
    RevenuePaidEvent.InputTuple,
    RevenuePaidEvent.OutputTuple,
    RevenuePaidEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyClaimed"
  ): TypedContractEvent<
    RoyaltyClaimedEvent.InputTuple,
    RoyaltyClaimedEvent.OutputTuple,
    RoyaltyClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "DisputeRaised(uint256,uint256,address,string)": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(uint256,string)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "IPRegistered(uint256,address,string,string)": TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;
    IPRegistered: TypedContractEvent<
      IPRegisteredEvent.InputTuple,
      IPRegisteredEvent.OutputTuple,
      IPRegisteredEvent.OutputObject
    >;

    "IPTransferred(uint256,address,address)": TypedContractEvent<
      IPTransferredEvent.InputTuple,
      IPTransferredEvent.OutputTuple,
      IPTransferredEvent.OutputObject
    >;
    IPTransferred: TypedContractEvent<
      IPTransferredEvent.InputTuple,
      IPTransferredEvent.OutputTuple,
      IPTransferredEvent.OutputObject
    >;

    "LicenseMinted(uint256,uint256,address,uint256)": TypedContractEvent<
      LicenseMintedEvent.InputTuple,
      LicenseMintedEvent.OutputTuple,
      LicenseMintedEvent.OutputObject
    >;
    LicenseMinted: TypedContractEvent<
      LicenseMintedEvent.InputTuple,
      LicenseMintedEvent.OutputTuple,
      LicenseMintedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevenuePaid(uint256,address,uint256)": TypedContractEvent<
      RevenuePaidEvent.InputTuple,
      RevenuePaidEvent.OutputTuple,
      RevenuePaidEvent.OutputObject
    >;
    RevenuePaid: TypedContractEvent<
      RevenuePaidEvent.InputTuple,
      RevenuePaidEvent.OutputTuple,
      RevenuePaidEvent.OutputObject
    >;

    "RoyaltyClaimed(uint256,address,uint256)": TypedContractEvent<
      RoyaltyClaimedEvent.InputTuple,
      RoyaltyClaimedEvent.OutputTuple,
      RoyaltyClaimedEvent.OutputObject
    >;
    RoyaltyClaimed: TypedContractEvent<
      RoyaltyClaimedEvent.InputTuple,
      RoyaltyClaimedEvent.OutputTuple,
      RoyaltyClaimedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
